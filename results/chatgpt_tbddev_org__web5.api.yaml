components:
  schemas:
    instructionResponse:
      properties:
        code:
          description: a sample piece of code or explanation.
          type: string
        explanation:
          description: what the sample code does or explanation is for.
          type: string
      type: object
info:
  description: An assistant for helping build web5 applications using the web5 sdk.
  title: Web5 assistant
  version: v1
openapi: 3.0.1
paths:
  /help/agent:
    get:
      operationId: helpAgent
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: Explains what is an agent in web5
  /help/api_did:
    get:
      operationId: helpApi_did
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: Explains the did API for web5
  /help/api_dwn:
    get:
      operationId: helpApi_dwn
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: Explains what the dwn class does and how you can configure the DWN
        from web5 js code
  /help/api_protocols:
    get:
      operationId: helpApi_protocols
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: Explains what the protocol class does but not what a protocol is, see
        protocol docs for that.
  /help/api_record:
    get:
      operationId: helpApi_record
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: Explains what the record class does
  /help/api_records:
    get:
      operationId: helpApi_records
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: Explanation of what the records class does
  /help/authentication:
    get:
      operationId: helpAuthentication
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: Explains how to authenticate a user with Web5 using DIDs
  /help/browser:
    get:
      operationId: helpBrowser
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: Shows how to use web5 in a html page script tag, loading from a CDN.
  /help/communication:
    get:
      operationId: helpCommunication
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: If you want to have an app that has peer to peer communication (from
        DID to DID) you can look at this example (which makes a richer use of protocols).
        This uses a index.html web page.
  /help/did:
    get:
      operationId: helpDid
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: How to create a DID
  /help/did_description:
    get:
      operationId: helpDid_description
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: Explains what a DID (decentralized identifier) is.
  /help/dwn_delete:
    get:
      operationId: helpDwn_delete
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: Delete Data from a Decentralized Web Node
  /help/dwn_description:
    get:
      operationId: helpDwn_description
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: Explains what a Decentralized Web Node (DWN, or DWeb Node) is (not
        code examples).
  /help/dwn_read:
    get:
      operationId: helpDwn_read
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: Read from Decentralized Web Nodes
  /help/dwn_write:
    get:
      operationId: helpDwn_write
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: Show how to write to Decentralized Web Nodes (DWN).
  /help/protocol:
    get:
      operationId: helpProtocol
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: Shows how to install a protocol, and also has an example of a web5
        protocol defintion that allows a credential issuance flow. Protocols allow
        threaded conversations and more and are a key feature web5.
  /help/protocol_description:
    get:
      operationId: helpProtocol_description
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: Explains what a protocol is in the context of web5 and DWN.
  /help/publishing_records:
    get:
      operationId: helpPublishing_records
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: Shows how to publish a record.
  /help/query:
    get:
      operationId: helpQuery
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: Method for querying the DWN for records of a provided target DID.
  /help/query_full:
    get:
      operationId: helpQuery_full
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: Query protocols from your DWN or remote DWeb nodes. Uses protocol as
        filter criteria but can also use a 'schema' field instead of protocol (which
        is a jsonschema)
  /help/quickstart:
    get:
      operationId: helpQuickstart
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: To get going quickly with web5.js, follow these instructions to setup
        a node.js javascript project that uses web5 and shows a range of actions.
  /help/simple-page-web5:
    get:
      operationId: helpSimple-page-web5
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: This is an example of a single html file which contains a web5 app,
        shows how the did is created and then the DWN is synced.
  /help/ssi:
    get:
      operationId: helpSsi
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: Explains what SSI is, as a concept
  /help/ssi_sdk:
    get:
      operationId: helpSsi_sdk
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: Explains what ssi-sdk by TBD in golang is for. This is separate to
        web5.js.
  /help/ssi_service:
    get:
      operationId: helpSsi_service
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: 'Self Sovereign Identity (SSI) Service API (notes from readme)


        A web service that exposes the SSI SDK as an HTTP API. Explains how to run
        it and what it is. This is distinct to web5.js.'
  /help/ssi_service_running:
    get:
      operationId: helpSsi_service_running
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: Explains how to run the ssi-service from source code
  /help/ssi_vc_issuance:
    get:
      operationId: helpSsi_vc_issuance
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: Explains how to use the ssi-service issue verifiable certificates (VC
        issuance), with a simple example app issuing and also validating credentials
  /help/store:
    get:
      operationId: helpStore
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: Shows how to store in the web5 DWN.
  /help/sync:
    get:
      operationId: helpSync
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: Explains how to sync data across multiple DWeb Nodes (DWNs) in Web5
  /help/tbdex_description:
    get:
      operationId: helpTbdex_description
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: 'TBDEX: A LIQUIDITY PROTOCOL including whitepaper'
  /help/tbdex_protocol:
    get:
      operationId: helpTbdex_protocol
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: tbdex protocol description including types and fields
  /help/todo_app:
    get:
      operationId: helpTodo_app
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: Build a ToDo App (and end to end example) with web5.js, can be used
        as an example to be inspired by.
  /help/update_to_web5:
    get:
      operationId: helpUpdate_to_web5
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: A guide on how to Upgrade Your webapp to Web5 (a tutorial)
  /help/web5_setup:
    get:
      operationId: helpWeb5_setup
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: This is how you install web5.js from the command line for npm, showing
        the version. A package.json example is also provided.
  /help/write_send:
    get:
      operationId: helpWrite_send
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instructionResponse'
          description: OK
      summary: Create a record in one DWN, and send it directly to another user's
        DWeb Nodes.
servers:
- url: https://chatgpt.tbddev.org
