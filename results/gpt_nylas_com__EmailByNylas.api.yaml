{openapi: 3.0.1, info: {title: 'Email by Nylas API', version: 1.0.0, description: 'This API allows you to search messages in your email account.', license: {name: MIT, url: 'https://opensource.org/licenses/MIT'}}, servers: [{url: 'https://gpt.nylas.com'}], security: [{access_token: []}], paths: {/help: {get: {summary: Help, description: 'Returns a markdown message which describes how to use Email by Nylas for the best results.', operationId: getHelp, responses: {'200': {description: 'Success response', content: {text/markdown: {schema: {type: string}}}}, '404': {description: 'Not found. The requested resource was not found.', content: {application/json: {schema: {type: object, $ref: '#/components/schemas/ErrorResponse'}}}}, default: {description: 'Unexpected error', content: {application/json: {schema: {type: object, $ref: '#/components/schemas/ErrorResponse'}}}}}}}, /api/account: {get: {summary: 'Get email account', description: 'Returns information about your email account.', operationId: getAccount, responses: {'200': {description: 'Success response', content: {application/json: {schema: {anyOf: [{$ref: '#/components/schemas/AcceptTermsOfServiceRequiredResponse'}, {$ref: '#/components/schemas/Account'}]}}}}, '401': {description: 'Unauthorized access because your access token is invalid or expired. Re-connect the Email by Nylas plugin to authenticate again.', content: {application/json: {schema: {type: object, $ref: '#/components/schemas/ErrorResponse'}}}}, '404': {description: 'Not found. The requested resource was not found.', content: {application/json: {schema: {type: object, $ref: '#/components/schemas/ErrorResponse'}}}}, default: {description: 'Unexpected error', content: {application/json: {schema: {type: object, $ref: '#/components/schemas/ErrorResponse'}}}}}}}, /api/email: {get: {summary: 'List emails', description: 'Returns a list of emails in your email account.', operationId: listEmails, parameters: [{name: subject, in: query, description: 'Filter emails with the exact subject (e.g. For emails with the word "meeting" in the subject, search "meeting").', required: false, allowReserved: true, schema: {type: string}}, {name: starred, in: query, description: 'Filter emails by starred status.', required: false, schema: {type: boolean}}, {name: unread, in: query, description: 'Filter emails by unread status.', required: false, schema: {type: boolean}}, {name: has_attachment, in: query, description: 'Filter emails by attachment status.', required: false, schema: {type: boolean}}, {name: last_message_before, in: query, description: 'Filter emails with the last message received before a given date represented as an ISO-8601 date.', required: false, schema: {type: string}}, {name: last_message_after, in: query, description: 'Filter emails with the last message received after a given date represented as an ISO-8601 date.', required: false, schema: {type: string}}, {name: started_before, in: query, description: 'Filter emails started before a given date represented as an ISO-8601 date.', required: false, schema: {type: string}}, {name: started_after, in: query, description: 'Filter emails started after a given date represented as an ISO-8601 date.', required: false, schema: {type: string}}, {name: limit, in: query, description: 'The maximum number of messages to return. Cannot be null. Maximum of 10.', required: false, schema: {type: integer, default: 5}}, {name: page, in: query, description: 'The page number for paginating through messages. Cannot be null, must be greater than 0.', required: false, schema: {type: integer, default: 1}}], responses: {'200': {description: 'Success response', content: {application/json: {schema: {anyOf: [{$ref: '#/components/schemas/AcceptTermsOfServiceRequiredResponse'}, {$ref: '#/components/schemas/ListEmailsResponse'}]}}}}, '400': {description: 'Bad request. Invalid request body or parameters.', content: {application/json: {schema: {type: object, $ref: '#/components/schemas/ErrorResponse'}}}}, '401': {description: 'Unauthorized access because your access token is invalid or expired. Re-connect the Email by Nylas plugin to authenticate again.', content: {application/json: {schema: {type: object, $ref: '#/components/schemas/ErrorResponse'}}}}, '403': {description: 'Forbidden. You do not have permission to access this resource.', content: {application/json: {schema: {type: object, $ref: '#/components/schemas/ErrorResponse'}}}}, '404': {description: 'Not found. The requested resource was not found.', content: {application/json: {schema: {type: object, $ref: '#/components/schemas/ErrorResponse'}}}}, default: {description: 'Unexpected error', content: {application/json: {schema: {type: object, $ref: '#/components/schemas/ErrorResponse'}}}}}}}, /api/email/search: {get: {summary: 'Search emails', description: 'Search through emails based on any text or specific to, from, participants, date or subject tags. For example, to search for emails from "John Doe" with the word "meeting" in the subject, search "from:John Doe meeting".', operationId: searchEmails, parameters: [{name: q, in: query, description: 'The search query to find emails. Cannot be empty.', required: true, allowReserved: true, schema: {type: string}}, {name: limit, in: query, description: 'The maximum number of emails to return. Cannot be null. Maximum of 5. Use the page parameter to paginate through emails.', required: false, schema: {type: integer, default: 5}}, {name: page, in: query, description: 'The page number for paginating through messages. Cannot be null, must be greater than 0.', required: false, schema: {type: integer, default: 1}}], responses: {'200': {description: 'Success response', content: {application/json: {schema: {anyOf: [{$ref: '#/components/schemas/AcceptTermsOfServiceRequiredResponse'}, {$ref: '#/components/schemas/ListEmailsResponse'}]}}}}, '400': {description: 'Bad request. Invalid request body or parameters.', content: {application/json: {schema: {type: object, $ref: '#/components/schemas/ErrorResponse'}}}}, '401': {description: 'Unauthorized access because your access token is invalid or expired. Re-connect the Email by Nylas plugin to authenticate again.', content: {application/json: {schema: {type: object, $ref: '#/components/schemas/ErrorResponse'}}}}, '403': {description: 'Forbidden. You do not have permission to access this resource.', content: {application/json: {schema: {type: object, $ref: '#/components/schemas/ErrorResponse'}}}}, '404': {description: 'Not found. The requested resource was not found.', content: {application/json: {schema: {type: object, $ref: '#/components/schemas/ErrorResponse'}}}}, default: {description: 'Unexpected error', content: {application/json: {schema: {type: object, $ref: '#/components/schemas/ErrorResponse'}}}}}}}, /api/email/count: {get: {summary: 'Count the total number of emails', description: 'Returns a count of the total number of emails in your email account.', operationId: countEmails, parameters: [{name: subject, in: query, description: 'Filter emails with the exact subject (e.g. For emails with the word "meeting" in the subject, search "meeting").', required: false, schema: {type: string}}, {name: starred, in: query, description: 'Filter emails by starred status.', required: false, schema: {type: boolean}}, {name: unread, in: query, description: 'Filter emails by unread status.', required: false, schema: {type: boolean}}, {name: has_attachment, in: query, description: 'Filter emails by attachment status.', required: false, schema: {type: boolean}}, {name: last_message_before, in: query, description: 'Filter emails with the last message received before a given date represented as an ISO-8601 date.', required: false, schema: {type: string}}, {name: last_message_after, in: query, description: 'Filter emails with the last message received after a given date represented as an ISO-8601 date.', required: false, schema: {type: string}}, {name: started_before, in: query, description: 'Filter emails started before a given date represented as an ISO-8601 date.', required: false, schema: {type: string}}, {name: started_after, in: query, description: 'Filter emails started after a given date represented as an ISO-8601 date.', required: false, schema: {type: string}}], responses: {'200': {description: 'Success response with total number of emails.', content: {application/json: {schema: {anyOf: [{$ref: '#/components/schemas/AcceptTermsOfServiceRequiredResponse'}, {$ref: '#/components/schemas/CountResponse'}]}}}}, '400': {description: 'Bad request. Invalid request body or parameters.', content: {application/json: {schema: {type: object, $ref: '#/components/schemas/ErrorResponse'}}}}, '401': {description: 'Unauthorized access because your access token is invalid or expired. Re-connect the Email by Nylas plugin to authenticate again.', content: {application/json: {schema: {type: object, $ref: '#/components/schemas/ErrorResponse'}}}}, '403': {description: 'Forbidden. You do not have permission to access this resource.', content: {application/json: {schema: {type: object, $ref: '#/components/schemas/ErrorResponse'}}}}, '404': {description: 'Not found. The requested resource was not found.', content: {application/json: {schema: {type: object, $ref: '#/components/schemas/ErrorResponse'}}}}, default: {description: 'Unexpected error', content: {application/json: {schema: {type: object, $ref: '#/components/schemas/ErrorResponse'}}}}}}}, '/api/email/{email_id}/body': {get: {summary: 'Get a single email''s body by ID', description: 'Get a single email''s body by ID', operationId: getEmailBody, parameters: [{name: email_id, in: path, description: 'The ID of the email to retrieve.', required: true, schema: {type: string}}, {name: approval_id, in: query, description: 'The ID of the approval request to use to retrieve the email body. This is required if an approval is required to retrieve the email body.', required: false, schema: {type: string}}], responses: {'200': {description: 'Success response', content: {application/json: {schema: {anyOf: [{$ref: '#/components/schemas/AcceptTermsOfServiceRequiredResponse'}, {$ref: '#/components/schemas/EmailBodyResponse'}]}}}}, '400': {description: 'Bad request. Invalid request body or parameters.', content: {application/json: {schema: {type: object, $ref: '#/components/schemas/ErrorResponse'}}}}, '401': {description: 'Unauthorized access because your access token is invalid or expired. Re-connect the Email by Nylas plugin to authenticate again.', content: {application/json: {schema: {type: object, $ref: '#/components/schemas/ErrorResponse'}}}}, '403': {description: 'Forbidden. You do not have permission to access this resource.', content: {application/json: {schema: {type: object, $ref: '#/components/schemas/ErrorResponse'}}}}, '404': {description: 'Not found. The requested resource was not found.', content: {application/json: {schema: {type: object, $ref: '#/components/schemas/ErrorResponse'}}}}, default: {description: 'Unexpected error', content: {application/json: {schema: {type: object, $ref: '#/components/schemas/ErrorResponse'}}}}}}}}, components: {securitySchemes: {access_token: {type: apiKey, name: Authorization, in: header}}, schemas: {Account: {type: object, description: 'A user''s account.', properties: {id: {type: string, description: 'A globally unique object identifier.'}, email: {type: string, description: 'The email address associated with the account.'}, provider: {type: string, description: 'The email provider associated with the account.'}, accepted_terms_of_service: {type: boolean, description: 'Whether the user has accepted the terms of service.'}, date_terms_of_service_accepted: {type: string, description: 'The date the user accepted the terms of service. Null if the user has not accepted the terms of service.', nullable: true}}}, Email: {type: object, description: 'An email from a user''s inbox.', properties: {email_id: {type: string, description: 'The unique identifier for the email message.'}, subject: {type: string, description: 'The subject of the email message.'}, from: {type: array, items: {$ref: '#/components/schemas/EmailContact'}, description: 'The sender of the email message.'}, to: {type: array, items: {$ref: '#/components/schemas/EmailContact'}, description: 'The recipients of the email message.'}, cc: {type: array, items: {$ref: '#/components/schemas/EmailContact'}, description: 'The CC recipients of the email message.'}, bcc: {type: array, items: {$ref: '#/components/schemas/EmailContact'}, description: 'The BCC recipients of the email message.'}, date: {type: string, format: date-time, description: 'The date and time the email message was recevied.'}, snippet: {type: string, description: 'A snippet of the email message.'}, starred: {type: boolean, description: 'Whether the email message is starred.'}, unread: {type: boolean, description: 'Whether the email message is unread.'}, labels: {type: array, description: 'The labels applied to the email message.', items: {$ref: '#/components/schemas/EmailLabel'}}, reply_to_email_id: {type: string, nullable: true, description: 'The ID of the message this message is a reply to. If null, this message is not a reply.'}}}, EmailContact: {type: object, properties: {name: {type: string, description: 'The name of the email contact.'}, email: {type: string, format: email, description: 'The email address of the contact.'}}}, EmailLabel: {type: object, properties: {name: {type: string, description: 'The display name of the email label.'}}}, ListEmailsResponse: {type: object, properties: {current_limit: {type: integer, description: 'The current limit used to fetch the emails.'}, next_page: {type: integer, nullable: true, description: 'The next page value to use to fetch the next set of emails if there are more emails to be fetched.'}, has_more_results: {type: boolean, description: 'Whether there are more emails to be fetched. Use the page parameter to paginate through the next set of emails.'}, emails: {type: array, items: {$ref: '#/components/schemas/Email'}}}}, EmailBodyResponse: {type: object, description: 'The body of an email message, chunked.', properties: {body: {type: array, description: 'The body of the email chunked.', items: {type: string, description: 'A chunk of the email body.'}}}}, ErrorResponse: {description: 'An error response from the API.', type: object, properties: {error: {type: string, description: 'The error message.'}, message: {type: string, description: 'A description of the error.'}}}, AcceptTermsOfServiceRequiredResponse: {type: object, description: 'A response indicating that needs to accept the terms of service before making this request.', properties: {type: {type: string, description: 'The response type.'}, message: {type: string, description: 'A message with instructions for the user on how to accept the terms of service.'}, approval_id: {type: string, description: 'The ID of the terms of service. Use this as the value for the "approval_id" query parameter when making the request again.'}, terms_of_service_url: {type: string, description: 'The URL the user needs to click to accept the terms of service.'}}}, CountResponse: {type: object, description: 'The total number of results for a query.', properties: {count: {type: integer, description: 'The total number of results for a query.'}}}}}}